#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vretta:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log('Listening on port: ' + port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io server.
 */

const Game = require('../models/Game');
const Player = require('../models/Player');

let io = require('socket.io')(server);
io.on('connection', client => {
  console.log('a user connected:', client.id);

  // When player connects, initialize them.
  client.on('storePlayerId', data => {
    const uid = data.userId;
    const gameId = data.gameId;

    client.join(gameId);

    // add it to db as socketIds = [uid: client.id]
    console.log('storing player:', uid, 'from:', gameId);
    console.log('socketId:', client.id);

    Game.findByIdAndUpdate(gameId, { $addToSet: { players: uid } }, {new: true}, (err, game) => {
      if (err) {
        console.log(err);
      } else {
        // the user list may be updated, so send it to the coach.
        const target = game.coachSocketId;
        client.to(target).emit('newPlayerList', {playerList: game.players});

        // update the player's socketId
        game.socketIds.set(uid, client.id);
        console.log('New player socketId:', client.id);

        // check if user has a field in messages. If not, add one.
        if (typeof game.messages === "undefined") {
          game.messages = {};
          game.messages.set(uid, []);
        } else if (typeof game.messages.get(uid) === "undefined") {
          game.messages.set(uid, []);
        }

        game.isActive.set(uid, true);
        // emit to coach that player._id has connect.
        client.to(game.coachSocketId).emit('playerChangeConnection', { playerId: uid, isActive: true });

        game.save();

      }
    });

    const filter = { _id: uid };
    const update = {
      socketId: client.id,
      currentGame: gameId,
    };
    Player.findOneAndUpdate(filter, update, {
      new: true,
      upsert: true
    }).then(player => {
      console.log('Player successfully added/updated.');
    }).catch(err => {
      console.log(err);
    });

  });

  // When coach connects, initialize them.
  client.on('storeCoachId', data => {
    const uid = data.userId;
    const gameId = data.gameId;

    client.join(gameId);

    // add it to db as socketIds = [uid: client.id]
    console.log('storing coach:', uid, 'from:', gameId);
    Game.findOneAndUpdate({_id: gameId}, {coachSocketId: client.id}, (err, doc) => {
      if (err) {
        console.log(err);
      } else {
        console.log('successfully updated.');
      }

    });
  });

  client.on('messageFromPlayer', data=> {
    const playerId = data.senderId;
    const message = data.message;
    const gameId = data.gameId;

    // Figure out coachSocketId.
    // emit the message there.
    Game.findById(gameId)
        .then(game => {
          const target = game.coachSocketId;
          client.to(target).emit('receiveMessage', {message: message, playerId: playerId});
        })

  });

  client.on('messageFromCoach', data => {
    const message = data.message;
    const playerId = data.receiverId;
    const gameId = data.gameId;

    // Figure out player's socketId.
    // emit the message there.
    Game.findById(gameId)
        .then(game => {
          const target = game.socketIds.get(playerId);
          client.to(target).emit('receiveMessage', { message: message });
        })
  });

  client.on('makeBroadcast', data => {
    const message = data.message;
    const gameId = data.gameId;
    client.to(gameId).emit('receiveBroadcast', { message: message });
  });

  client.on('disconnect', () => {
    // might need to store another dict with socketIds as keys instead.
    // Nope, they keep changing frequently, so it would result in a huge dict.
    // Just search for the value and get the associated key (uid).
    // then update UI from there.

    // first check if it's the coach. If so, do nothing because he don't matter.
    // need to do:
    // find which uid maps to client.id (the socket id)
    // we also need to find which game they are in... that does not scale well. O(n^2).
    // okay, that's just not an option. Can't loop over db queries.

    // make a NEW collection for all players.

    // game.isActive.set(uid, true);
    // then emit and event to the coach.
    console.log('a user disconnected:', client.id);

    const filter = { socketId: client.id, };
    const update = { currentGame: null };

    Player.findOneAndUpdate(filter, update, {
      new: false,
    }).then(player => {

      if (player === null) {
        return;
      }

      if (player.currentGame !== null) {
        Game.findById(player.currentGame)
            .then(game => {
              game.isActive.set(player._id, false);

              // emit to coach that player._id has disconnected.
              client.to(game.coachSocketId).emit('playerChangeConnection', { playerId: player._id, isActive: false });

              game.markModified('isActive');
              game.save();
            })
            .catch(err => console.log(err));
      }

    }).catch(err => {
      console.log(err);
      console.log('Error because the disconnect was a coach, I hope.')
    });

    // client.leave(gameId);
  });

  client.on('error', (err) => {
    console.log("Error from:", client.id);
    console.log(err);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
