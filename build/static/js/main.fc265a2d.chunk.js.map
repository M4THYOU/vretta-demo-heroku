{"version":3,"sources":["components/Start.js","components/TheApp.js","components/util/SingleGame.js","components/util/utils.js","components/player/Player.js","components/coach/Coach.js","components/coach/CoachGame.js","components/player/PlayerChat.js","App.js","serviceWorker.js","index.js","when.mp3"],"names":["Start","props","state","to","Component","TheApp","isCoach","socket","Sockette","timeout","maxAttempts","onopen","e","console","log","json","action","onmessage","eObj","JSON","parse","data","eventType","token","Attributes","localStorage","setItem","history","push","onreconnect","onmaximum","onclose","onerror","isCoachVal","getItem","this","ButtonGroup","Button","outline","color","onClick","redirectHandler","SingleGame","link","obj","_id","game","ListGroupItem","pathname","date","sortGames","games","arr","Object","keys","map","key","coachId","sort","a","b","keyA","Date","keyB","renderGame","currentGame","Player","games_sorted","Items","forEach","item","gameId","setState","ListGroup","Coach","newGame","withRouter","sound","require","CoachGame","audioRef","React","createRef","chatTitle","players","currentChat","broadcasts","currentMessage","selectedPlayer","showBroadcasts","messages","isActive","hasUnread","window","location","href","match","params","playerList","currPlayer","update","$set","msg","message","playerId","current","play","catch","err","currChat","slice","updateUnread","unread","player","playerMessages","preventDefault","receiver","sender","newMsg","currBroadcasts","target","value","Col","className","index","Row","renderMarginCol","sm","renderBroadcastBar","classes","playerOnClick","xs","renderActiveIndicator","renderUnread","undefined","length","Container","renderPlayer","broadcastInitHandler","id","ref","src","exitHandler","renderBroadcastButton","renderPlayers","renderMsg","size","offset","InputGroup","Label","for","hidden","Input","type","name","placeholder","onChange","updateMessage","InputGroupAddon","addonType","sendMessage","PlayerChat","uid","chat","messageData","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.fc265a2d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Start extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to=\"/app\">Enter</Link>\n            </div>\n        );\n    }\n\n}\n\nexport default Start;\n","import React, { Component } from \"react\";\nimport { Button, ButtonGroup } from \"reactstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Sockette from \"sockette\";\n\nclass TheApp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //\n        };\n    }\n\n    redirectHandler(isCoach) {\n\n        const socket = new Sockette('wss://inrtpyg747.execute-api.us-east-2.amazonaws.com/dev', {\n            timeout: 5e3,\n            maxAttempts: 10,\n            onopen: e => {\n                console.log('Connected!', e);\n                socket.json({action: \"getToken\"});\n            },\n            onmessage: e => {\n                console.log('Received:', e);\n                const eObj = JSON.parse(e.data);\n                const eventType = eObj.eventType;\n\n                // Possible Events\n                // getJWT: returns a JWT token to use as the playerId\n\n                if (eventType === \"getJWT\") {\n                    const token = eObj.Attributes.token;\n\n                    localStorage.setItem(\"uid\", token);\n                    localStorage.setItem(\"isCoach\", isCoach);\n\n                    if (isCoach) {\n                        this.props.history.push('/app/coach/');\n                    } else {\n                        this.props.history.push('/app/player/');\n                    }\n\n                }\n\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop Attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e)\n        });\n\n    }\n\n    render() {\n\n        const isCoachVal = localStorage.getItem(\"isCoach\");\n\n        if (isCoachVal === 'false') {\n            this.props.history.push('/app/player');\n        } else if (isCoachVal === 'true') {\n            this.props.history.push('/app/coach');\n        }\n\n        localStorage.getItem(\"uid\");\n\n        return (\n            <div>\n                <h2>App</h2>\n                <ButtonGroup>\n                    <Button outline color=\"primary\" onClick={() => { this.redirectHandler(true) }}>Coach</Button>\n                    <Button outline color=\"primary\" onClick={() => { this.redirectHandler(false) }}>Player</Button>\n                </ButtonGroup>\n\n            </div>\n        );\n    }\n\n}\n\nexport default TheApp;\n","import React, {Component} from \"react\";\nimport {Button, ListGroupItem} from \"reactstrap\";\nimport {Link} from \"react-router-dom\";\n\nclass SingleGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const isCoach = props.isCoach;\n        let link = '/app/';\n        if (isCoach) {\n            link += 'coach/';\n        } else {\n            link += 'player/';\n        }\n        link +=  props.obj._id;\n\n        this.state = {\n            game: props.obj,\n            link: link\n        };\n    }\n\n    render() {\n        return (\n            <ListGroupItem>\n                <Link to={{\n                    pathname: this.state.link,\n                    state: {\n                        game: this.state.game,\n                    }\n                }}>\n                    <Button>\n                        { this.props.obj._id } | { this.props.obj.date }\n                    </Button>\n                </Link>\n            </ListGroupItem>\n        );\n    }\n\n}\n\nexport default SingleGame;\n","import SingleGame from \"./SingleGame\";\nimport React from \"react\";\n\nexport function  sortGames(games) {\n    let arr = Object.keys(games).map(function(key) {\n        return {'_id': key, 'date': games[key].date, \"coachId\": games[key].coachId};\n    });\n\n    arr.sort(function(a, b) {\n        let keyA = new Date(a.date),\n            keyB = new Date(b.date);\n        // Compare the 2 dates\n        if (keyA > keyB) return -1;\n        if (keyA < keyB) return 1;\n        return 0;\n    });\n\n    return arr;\n\n}\n\nexport function renderGame(currentGame, isCoach) {\n    return (<SingleGame obj={ currentGame }\n                        key={ currentGame._id }\n                        isCoach={ isCoach } />);\n}\n","import React, { Component } from \"react\";\nimport { sortGames, renderGame } from \"../util/utils\"\nimport { ListGroup } from \"reactstrap\";\nimport Sockette from \"sockette\";\n\nclass Player extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            games: {\n\n            },\n            games_sorted: [\n\n            ]\n        };\n    }\n\n    componentDidMount() {\n\n        const socket = new Sockette('wss://inrtpyg747.execute-api.us-east-2.amazonaws.com/dev', {\n            timeout: 5e3,\n            maxAttempts: 10,\n            onopen: e => {\n                console.log('Connected!', e);\n\n                socket.json({action: \"getGames\" });\n\n            },\n            onmessage: e => {\n                console.log('Received:', e);\n\n                const eObj = JSON.parse(e.data);\n                const eventType = eObj.eventType;\n\n                // Possible Events\n                // gamesData: Returns all the games, stored in eObj.Items\n\n                if (eventType === \"gamesData\") {\n                    console.log(eObj.Items);\n\n                    let games = {};\n                    eObj.Items.forEach(item => {\n                        games[item.gameId] = {date: item.date, coachId: item.coachId};\n                    });\n\n                    const arr = sortGames(games);\n                    this.setState({games: games, games_sorted: arr});\n\n                }\n\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop Attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e)\n        });\n\n    }\n\n    render() {\n        const games_sorted = this.state.games_sorted;\n        return (\n            <div>\n                <h2>Player</h2>\n                <h3>Games</h3>\n                <ListGroup>\n                    {\n                        games_sorted.map(game => {\n                            return renderGame(game, false);\n                        }) }\n                </ListGroup>\n            </div>\n        );\n    }\n\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport { Button, ListGroup } from \"reactstrap\";\nimport { withRouter } from \"react-router\";\nimport { sortGames, renderGame } from \"../util/utils\";\nimport Sockette from \"sockette\";\n\nclass Coach extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            games: {\n\n            },\n            games_sorted: [\n\n            ],\n        };\n    }\n\n    componentDidMount() {\n\n        this.state.socket = new Sockette('wss://inrtpyg747.execute-api.us-east-2.amazonaws.com/dev', {\n            timeout: 5e3,\n            maxAttempts: 10,\n            onopen: e => {\n                console.log('Connected!', e);\n\n                this.state.socket.json({action: \"getGames\" });\n\n            },\n            onmessage: e => {\n                console.log('Received:', e);\n\n                const eObj = JSON.parse(e.data);\n                const eventType = eObj.eventType;\n\n                // two possible events\n                // gamesData: Returns all the games, stored in eObj.Items\n                // createGame: Returns the new gameId and then we redirect to the new game\n\n                if (eventType === \"gamesData\") {\n                    console.log(eObj.Items);\n\n                    let games = {};\n                    eObj.Items.forEach(item => {\n                        games[item.gameId] = {date: item.date, coachId: item.coachId};\n                    });\n\n                    const arr = sortGames(games);\n                    this.setState({games: games, games_sorted: arr});\n\n\n                } else if (eventType === \"createGame\") {\n                    const gameId = eObj.gameId;\n\n                    this.props.history.push({\n                        pathname: '/app/coach/' + gameId,\n                    });\n                }\n\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop Attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e)\n        });\n\n    }\n\n    newGame() {\n        const coachId = localStorage.getItem('uid');\n\n        const data = {\n            \"coachId\": coachId,\n        };\n\n        this.state.socket.json({action: \"createGame\", data: data });\n    }\n\n    render() {\n        const games_sorted = this.state.games_sorted;\n        return (\n            <div>\n                <h2>Coach</h2>\n                <Button color=\"primary\" onClick={() => { this.newGame() } }>Create Game</Button>\n                <h3>Games</h3>\n                <ListGroup>\n                    {\n                        games_sorted.map(game => {\n                            return renderGame(game, true);\n                    }) }\n                </ListGroup>\n            </div>\n        );\n    }\n\n}\n\nexport default withRouter(Coach);\n","import React, { Component } from \"react\";\nimport {\n    Button,\n    Container,\n    Col,\n    Row,\n    ListGroupItem,\n    Label,\n    Input,\n    InputGroupAddon, InputGroup\n} from \"reactstrap\";\nimport update from 'immutability-helper';\nimport Sockette from \"sockette\";\n\nlet sound = require('../../when.mp3');\n\nclass CoachGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // create audio ref.\n        this.audioRef = React.createRef();\n\n        this.state = {\n            chatTitle: \"Current Chat\",\n            players: [],\n            currentChat: [],\n            broadcasts: [],\n            currentMessage: '',\n            selectedPlayer: null,\n            showBroadcasts: false,\n            messages: {},\n            game: null,\n            socket: null,\n            isActive: {},\n            hasUnread: {},\n        };\n\n    }\n\n    exitHandler() {\n        window.location.href = \"/app/coach\";\n    }\n\n    componentDidMount() {\n        this.state.socket = new Sockette('wss://inrtpyg747.execute-api.us-east-2.amazonaws.com/dev', {\n            timeout: 5e3,\n            maxAttempts: 10,\n            onopen: e => {\n                console.log('Connected!');\n\n                const gameId = this.props.match.params.gameId;\n\n                // connectionId is available in the lambda.\n                const data = {\n                    \"gameId\": gameId\n                };\n\n                // coachConnect returns the game.\n                this.state.socket.json({action: \"coachConnect\", data: data });\n\n            },\n            onmessage: e => {\n                console.log('Received:', e);\n\n                const eObj = JSON.parse(e.data);\n                const eventType = eObj.eventType;\n\n                // Possible Events\n                // gameData: Returns all the current game, which use to update the state\n                // playerUpdate: playerList has changed or player has changed their activity.\n                // message: message received from a player\n                // playerChangeConnection: a player goes active or inactive.\n\n                if (eventType === \"gameData\") {\n                    const game = eObj.Attributes;\n                    console.log(game);\n\n                    this.setState({\n                        players: game.players,\n                        broadcasts: game.broadcasts,\n                        messages: game.messages,\n                        game: game,\n                        isActive: game.isActive,\n                        hasUnread: game.hasUnread\n                    });\n\n                } else if (eventType === \"playerUpdate\") {\n                    const playerList = eObj.playerList;\n                    const currPlayer = eObj.currPlayer;\n                    const isActive = eObj.isActive;\n\n                    console.log(isActive);\n                    console.log(currPlayer);\n\n                    this.setState({\n                        players: playerList,\n                        isActive: update(this.state.isActive, {[currPlayer]: {$set: isActive}}),\n                    });\n                }  else if (eventType === \"message\") {\n                    console.log(eObj);\n\n                    const msg = eObj.Attributes.message;\n                    const playerId = eObj.Attributes.playerId;\n\n                    this.audioRef.current.play().catch(err => {\n                        console.log(err);\n                    });\n\n                    if (playerId === this.state.selectedPlayer) {\n                        let currChat = this.state.currentChat.slice();\n                        currChat.push([msg, false]);\n\n                        // now update state of messages\n                        this.setState({\n                            messages: update(this.state.messages, {[playerId]: {$set: currChat}}),\n                            currentChat: currChat,\n                            hasUnread: update(this.state.hasUnread, {[playerId]: {$set: false}}),\n                        });\n\n                        // unset it as hasUnread=false on db.\n                        this.updateUnread(playerId, false);\n\n                    } else { // then we just update messages\n                        let currChat = this.state.messages[playerId];\n                        if (typeof currChat === \"undefined\") {\n                            currChat = [];\n                        }\n                        currChat.push([msg, false]);\n\n                        this.setState({\n                            messages: update(this.state.messages, {[playerId]: {$set: currChat}}),\n                            hasUnread: update(this.state.hasUnread, {[playerId]: {$set: true}}),\n                        });\n                    }\n\n                } else if (eventType === \"playerChangeConnection\") {\n                    console.log(eObj);\n\n                    const isActive = eObj.Attributes.isActive;\n                    const playerId = eObj.Attributes.playerId;\n\n                    this.setState({\n                        isActive: update(this.state.isActive, {[playerId]: {$set: isActive}}),\n                    });\n\n                }\n\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop Attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e)\n        });\n\n    }\n\n    updateUnread(playerId, unread) {\n        const gameId = this.state.game.gameId;\n        const data = {\n            \"gameId\": gameId,\n            \"unread\": unread,\n            \"playerId\": playerId,\n        };\n\n        this.state.socket.json({action: \"updateUnread\", data: data });\n    }\n\n    playerOnClick(player) {\n        const playerMessages = this.state.messages[player];\n\n        if (this.state.hasUnread[player]) {\n            this.updateUnread(player, false);\n        }\n\n        if (typeof playerMessages === \"undefined\") {\n            this.setState({\n                currentChat: [],\n                selectedPlayer: player,\n                showBroadcasts: false,\n                chatTitle: \"Current Chat\",\n                hasUnread: update(this.state.hasUnread, {[player]: {$set: false}}),\n            });\n        } else {\n            this.setState({\n                currentChat: playerMessages,\n                selectedPlayer: player,\n                showBroadcasts: false,\n                chatTitle: \"Current Chat\",\n                hasUnread: update(this.state.hasUnread, {[player]: {$set: false}}),\n            });\n        }\n    }\n\n    sendMessage(e) {\n        e.preventDefault();\n\n        const receiver = this.state.selectedPlayer;\n        const showBroadcasts = this.state.showBroadcasts;\n        if (!receiver && !showBroadcasts) { // if no player has been selected, i.e. selectedPlayer is null or undefined.\n            console.log(\"returning...\");\n            return;\n        }\n\n        if (this.state.currentMessage === '') {\n            console.log(\"empty message, returning\");\n            return;\n        }\n        \n        const sender = localStorage.getItem('uid');\n        const message = this.state.currentMessage;\n        const gameId = this.state.game.gameId;\n\n        // update the current client's chat.\n        let currChat = this.state.currentChat.slice();\n\n        if (showBroadcasts) {\n            const newMsg = [message, true, true];\n            currChat.push(newMsg); // third element indicates it's a broadcast message.\n\n            // in this case, update broadcasts state too.\n            let currBroadcasts = this.state.broadcasts.slice();\n            currBroadcasts.push(newMsg);\n            this.setState({ broadcasts: currBroadcasts });\n        } else {\n            currChat.push([message, true]);\n        }\n\n        this.setState({\n            messages: update(this.state.messages, {[receiver]: {$set: currChat}}),\n            currentChat: currChat,\n            currentMessage: ''\n        });\n\n        if (showBroadcasts) { // message to all players\n\n            if (this.state.socket) {\n                const data = {\n                    \"message\": message,\n                    \"gameId\": gameId\n                };\n\n                this.state.socket.json({action: \"broadcast\", data: data });\n            }\n\n        } else { // message to 1 player.\n            if (this.state.socket) {\n                const data = {\n                    \"coachId\": sender,\n                    \"message\": message,\n                    \"playerId\": receiver,\n                    \"gameId\": gameId\n                };\n\n                this.state.socket.json({action: \"messageFromCoach\", data: data });\n            }\n\n        }\n\n    }\n\n    broadcastInitHandler() {\n        this.setState({\n            currentChat: this.state.broadcasts,\n            selectedPlayer: \"broadcast\",\n            showBroadcasts: true,\n            chatTitle: 'Broadcast'\n        });\n    }\n\n    updateMessage(e) {\n        this.setState({\n            currentMessage: e.target.value\n        })\n    }\n\n    renderMarginCol(msg) {\n        if (msg[1]) {\n            return (\n                <Col>\n\n                </Col>\n            );\n        }\n    }\n\n    renderBroadcastBar(msg) {\n\n        if (msg[2]) {\n            return (\n                    <ListGroupItem className=\"my-broadcast-bar\">\n                    </ListGroupItem>\n            );\n        }\n\n    }\n\n    renderMsg(msg, index) {\n        let color = \"secondary\";\n        if (msg[1]) {\n            color = \"info\";\n        }\n\n        return (\n            <Row key={ index }>\n                { this.renderMarginCol(msg) }\n                <Col sm='auto' className=\"no-margin-message\">\n                    <ListGroupItem color={ color } key={ index }>\n                        { msg[0] }\n                    </ListGroupItem>\n                </Col>\n                { this.renderBroadcastBar(msg) }\n            </Row>\n        )\n    }\n\n    renderActiveIndicator(player) {\n        if (this.state.isActive[player]) {\n            return (\n                <Button color=\"success\" className=\"active-button\" outline>Active</Button>\n            );\n        } else {\n            return (\n                <Button color=\"danger\" className=\"active-button\" outline>Inactive</Button>\n            );\n        }\n    }\n\n    renderUnread(player) {\n        if (this.state.hasUnread[player]) {\n            return (\n                <Col>\n                    <h1 className=\"message-indicator\">&#x2022;</h1>\n                </Col>\n            );\n        }\n    }\n\n    renderPlayer(player) {\n        let classes = \"player-row\";\n\n        if (player === \"placeholder\") {\n            return;\n        }\n\n        if (this.state.selectedPlayer === player) {\n            classes += \" selected\";\n        }\n        return (\n            <Row onClick={() => this.playerOnClick(player)} key={ player } className={ classes }>\n                <Col xs=\"6\" key={ player }>\n                    { player.slice(-10) }\n                </Col>\n                <Col xs=\"3\">\n                    { this.renderActiveIndicator(player) }\n                </Col>\n                    { this.renderUnread(player) }\n            </Row>\n        )\n    }\n\n    renderPlayers() {\n        let players = [];\n        if (this.state !== null && typeof this.state !== 'undefined') {\n            players = this.state.players;\n        }\n\n        if (players === undefined || players.length < 2) {\n            return (<p>Looking for players...</p>);\n        } else {\n            return (\n                <Container>\n                    {\n                        players.map(player => {\n                            return this.renderPlayer(player);\n                        })\n                    }\n                </Container>\n            );\n        }\n\n    }\n\n    renderBroadcastButton() {\n        if (this.state.selectedPlayer === \"broadcast\") {\n            return (\n                <Button color=\"info\" onClick={() => this.broadcastInitHandler()}>Broadcast</Button>\n            );\n        } else {\n            return (\n                <Button color=\"info\" onClick={() => this.broadcastInitHandler()} outline>Broadcast</Button>\n            );\n        }\n    }\n\n    render() {\n        let currentChat = this.state.currentChat;\n        if (typeof currentChat === 'undefined') {\n            currentChat = [];\n        }\n\n        let selectedPlayer = this.state.selectedPlayer;\n        if (selectedPlayer === \"broadcast\") {\n            selectedPlayer = \"\";\n        } else if (selectedPlayer) {\n            selectedPlayer = selectedPlayer.slice(-10);\n        }\n\n            return (\n                <Container className=\"outer-container\">\n                    <audio id=\"message-sound\" ref={ this.audioRef } src={ sound }></audio>\n                    <Button className=\"float-sm-left\" color=\"danger\" onClick={() => { this.exitHandler() }}>EXIT</Button>\n                    <Row className=\"outer-row\">\n                        <Col xs=\"6\">\n                            <h2>Broadcast</h2>\n                            { this.renderBroadcastButton() }\n                            <h2>Players</h2>\n                            { this.renderPlayers() }\n                        </Col>\n\n                        <Col xs=\"6\" className=\"chat-view\">\n                            <h2>{ this.state.chatTitle }</h2>\n                            <h6>{ selectedPlayer }</h6>\n                            {\n                                currentChat.map((msg, index) => {\n                                    return this.renderMsg(msg, index);\n                                })\n                            }\n                        </Col>\n                        <Col xs={{ size: 6, offset: 6 }}>\n                            <InputGroup>\n                                <Label for=\"message\" hidden>Type here...</Label>\n                                <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Type here...\"\n                                       value={ this.state.currentMessage } onChange={ e => this.updateMessage(e) }\n                                />\n                                <InputGroupAddon addonType=\"append\">\n                                    <Button onClick={ (e) => this.sendMessage(e) }>Send</Button>\n                                </InputGroupAddon>\n\n                            </InputGroup>\n                        </Col>\n                    </Row>\n\n                </Container>\n            );\n    }\n\n}\n\nexport default CoachGame;\n","import React, { Component } from \"react\";\nimport {Label, Input, Button, Container, Row, Col, InputGroup, InputGroupAddon, ListGroupItem} from \"reactstrap\";\nimport socketIOClient from \"socket.io-client\";\nimport Sockette from \"sockette\";\n\nlet sound = require('../../when.mp3');\n\nclass PlayerChat extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // create audio ref.\n        this.audioRef = React.createRef();\n\n        const game = props.location.state.game;\n\n        this.state = {\n            currentChat: [],\n            currentMessage: '',\n            gameId: null,\n            coachId: null,\n            socket: null\n        };\n    }\n\n    exitHandler() {\n        window.location.href = \"/app/player\";\n    }\n\n    componentDidMount() {\n        const uid = localStorage.getItem('uid');\n\n        this.state.socket = new Sockette('wss://inrtpyg747.execute-api.us-east-2.amazonaws.com/dev', {\n            timeout: 5e3,\n            maxAttempts: 10,\n            onopen: e => {\n                console.log('Connected!', e);\n\n                const gameId = this.props.match.params.gameId;\n\n                const data = {\n                    uid: uid,\n                    gameId: gameId\n                };\n\n                this.state.socket.json({action: \"playerConnect\", data: data });\n\n            },\n            onmessage: e => {\n                console.log('Received:', e);\n                const eObj = JSON.parse(e.data);\n                const eventType = eObj.eventType;\n\n                // Possible Events\n                // getGame: returns all the game data this view needs.\n                // message: a message has been received.\n                // broadcast: a broadcast has been received.\n\n                if (eventType === \"getGame\") {\n                    const gameId = eObj.Attributes.gameId;\n                    const coachId = eObj.Attributes.coachId;\n                    const chat = eObj.Attributes.chat;\n\n                    this.setState({\n                        currentChat: chat,\n                        gameId: gameId,\n                        coachId: coachId,\n                    });\n\n                } else if (eventType === \"message\") {\n                    const msg = eObj.Attributes.message;\n\n                    this.audioRef.current.play().catch(err => {\n                        console.log(err);\n                    });\n\n                    let currChat = this.state.currentChat.slice();\n                    currChat.push([msg, true]);\n                    this.setState({\n                        currentChat: currChat\n                    });\n\n                } else if (eventType === \"broadcast\") {\n                    const msg = eObj.Attributes.message;\n\n                    this.audioRef.current.play().catch(err => {\n                        console.log(err);\n                    });\n\n                    let currChat = this.state.currentChat.slice();\n                    currChat.push([msg, true, true]);\n                    this.setState({\n                        currentChat: currChat\n                    });\n                }\n\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop Attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e)\n        });\n\n    }\n\n    sendMessage(e) {\n        e.preventDefault();\n\n        if (this.state.currentMessage === '') {\n            console.log(\"empty message, returning\");\n            return;\n        }\n\n        const sender = localStorage.getItem('uid');\n        const message = this.state.currentMessage;\n        const gameId = this.state.gameId;\n\n        // update the current client's chat.\n        let currChat = this.state.currentChat.slice();\n        currChat.push([message, false]);\n        this.setState({\n            currentChat: currChat,\n            currentMessage: ''\n        });\n\n        console.log(message);\n\n        if (this.state.socket) {\n\n            const messageData = {\n                uid: sender,\n                message: message,\n                gameId: gameId\n            };\n\n            this.state.socket.json({action: \"messageFromPlayer\", data: messageData });\n\n        }\n\n    }\n\n    updateMessage(e) {\n        this.setState({\n            currentMessage: e.target.value\n        })\n    }\n\n    renderMarginCol(msg) {\n        if (!msg[1]) {\n            return (\n                <Col>\n\n                </Col>\n            );\n        }\n    }\n\n    renderBroadcastBar(msg) {\n\n        if (msg[2]) {\n            return (\n                <ListGroupItem className=\"not-my-broadcast-bar\">\n                </ListGroupItem>\n            );\n        }\n\n    }\n    renderMsg(msg, index) {\n        let color = \"secondary\";\n        if (!msg[1]) {\n            color = \"info\";\n        }\n        return (\n            <Row key={ index }>\n                { this.renderMarginCol(msg) }\n                { this.renderBroadcastBar(msg) }\n                <Col sm='auto' className=\"no-margin-message\">\n                    <ListGroupItem color={ color } key={ index }>\n                        { msg[0] }\n                    </ListGroupItem>\n                </Col>\n            </Row>\n        )\n    }\n\n    render() {\n        const currentChat = this.state.currentChat;\n\n        return (\n            <Container className=\"outer-container\">\n                <audio id=\"message-sound\" ref={ this.audioRef } src={ sound }></audio>\n                <Button className=\"float-sm-left\" color=\"danger\" onClick={() => { this.exitHandler() }}>EXIT</Button>\n                <Row className=\"outer-row\">\n                    <Col sm={{ size: 6, offset: 3 }} className=\"chat-view\">\n                        <h2>Current Chat</h2>\n                        {\n                            currentChat.map((msg, index) => {\n                                return this.renderMsg(msg, index);\n                            })\n                        }\n\n                    </Col>\n                    <Col sm={{ size: 6, offset: 3 }}>\n                        <InputGroup>\n                            <Label for=\"message\" hidden>Type here...</Label>\n                            <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Type here...\"\n                                   value={ this.state.currentMessage } onChange={ e => this.updateMessage(e) }\n                            />\n                            <InputGroupAddon addonType=\"append\">\n                                <Button onClick={ (e) => this.sendMessage(e) }>Send</Button>\n                            </InputGroupAddon>\n\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n}\n\nexport default PlayerChat;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\n\nimport Start from \"./components/Start\";\nimport TheApp from \"./components/TheApp\";\n\nimport Player from \"./components/player/Player\";\n\nimport Coach from \"./components/coach/Coach\";\nimport CoachGame from \"./components/coach/CoachGame\";\n\nimport PlayerChat from \"./components/player/PlayerChat\";\n\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path=\"/\" component={Start} />\n                    <Route exact path=\"/app\" component={TheApp} />\n\n                    <Route exact path=\"/app/coach\" component={Coach} />\n                    <Route path=\"/app/coach/:gameId\" component={CoachGame} />\n\n                    <Route exact path=\"/app/player\" component={Player} />\n                    <Route path=\"/app/player/:gameId\" component={ PlayerChat } />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/when.6caba2fa.mp3\";"],"sourceRoot":""}