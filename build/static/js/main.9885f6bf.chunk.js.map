{"version":3,"sources":["components/Start.js","components/TheApp.js","components/util/SingleGame.js","components/util/utils.js","components/player/Player.js","components/coach/Coach.js","components/coach/CoachGame.js","components/player/PlayerChat.js","App.js","serviceWorker.js","index.js","when.mp3"],"names":["Start","props","state","to","Component","TheApp","isCoach","uid","uuidv4","localStorage","setItem","this","history","push","isCoachVal","getItem","ButtonGroup","Button","outline","color","onClick","redirectHandler","SingleGame","link","obj","_id","game","ListGroupItem","pathname","date","sortGames","games","arr","Object","keys","map","key","coachId","sort","a","b","keyA","Date","keyB","renderGame","currentGame","Player","games_sorted","console","log","fetch","credentials","then","res","json","data","forEach","item","setState","ListGroup","Coach","method","headers","catch","err","body","JSON","stringify","newGame","withRouter","sound","require","CoachGame","audioRef","React","createRef","chatTitle","players","currentChat","broadcasts","currentMessage","selectedPlayer","showBroadcasts","messages","socket","isActive","hasUnread","location","gameId","match","params","emit","window","href","socketIOClient","on","userId","current","play","msg","message","playerId","currChat","slice","update","$set","updateUnread","playerList","unread","player","playerMessages","e","preventDefault","receiver","sender","newMsg","currBroadcasts","newMessages","currMessages","s_message","senderId","receiverId","fromCoach","target","value","Col","className","index","Row","renderMarginCol","sm","renderBroadcastBar","classes","playerOnClick","xs","renderActiveIndicator","renderUnread","undefined","length","Container","renderPlayer","broadcastInitHandler","id","ref","src","exitHandler","renderBroadcastButton","renderPlayers","renderMsg","size","offset","InputGroup","Label","for","hidden","Input","type","name","placeholder","onChange","updateMessage","InputGroupAddon","addonType","sendMessage","PlayerChat","playerChat","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.9885f6bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Start extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to=\"/app\">Enter</Link>\n            </div>\n        );\n    }\n\n}\n\nexport default Start;\n","import React, { Component } from \"react\";\nimport { Button, ButtonGroup } from \"reactstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass TheApp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //\n        };\n    }\n\n    redirectHandler(isCoach) {\n\n        //generate uuid.\n        let uid = uuidv4();\n        localStorage.setItem(\"uid\", uid);\n        localStorage.setItem(\"isCoach\", isCoach);\n\n        if (isCoach) {\n            this.props.history.push('/app/coach/');\n        } else {\n            this.props.history.push('/app/player/');\n        }\n\n    }\n\n    render() {\n\n        const isCoachVal = localStorage.getItem(\"isCoach\");\n\n        if (isCoachVal === 'false') {\n            this.props.history.push('/app/player');\n        } else if (isCoachVal === 'true') {\n            this.props.history.push('/app/coach');\n        }\n\n        localStorage.getItem(\"uid\");\n\n        return (\n            <div>\n                <h2>App</h2>\n                <ButtonGroup>\n                    <Button outline color=\"primary\" onClick={() => { this.redirectHandler(true) }}>Coach</Button>\n                    <Button outline color=\"primary\" onClick={() => { this.redirectHandler(false) }}>Player</Button>\n                </ButtonGroup>\n\n            </div>\n        );\n    }\n\n}\n\nexport default TheApp;\n","import React, {Component} from \"react\";\nimport {Button, ListGroupItem} from \"reactstrap\";\nimport {Link} from \"react-router-dom\";\n\nclass SingleGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const isCoach = props.isCoach;\n        let link = '/app/';\n        if (isCoach) {\n            link += 'coach/';\n        } else {\n            link += 'player/';\n        }\n        link +=  props.obj._id;\n\n        this.state = {\n            game: props.obj,\n            link: link\n        };\n    }\n\n    render() {\n        return (\n            <ListGroupItem>\n                <Link to={{\n                    pathname: this.state.link,\n                    state: {\n                        game: this.state.game,\n                    }\n                }}>\n                    <Button>\n                        { this.props.obj._id } | { this.props.obj.date }\n                    </Button>\n                </Link>\n            </ListGroupItem>\n        );\n    }\n\n}\n\nexport default SingleGame;\n","import SingleGame from \"./SingleGame\";\nimport React from \"react\";\n\nexport function  sortGames(games) {\n    let arr = Object.keys(games).map(function(key) {\n        return {'_id': key, 'date': games[key].date, \"coachId\": games[key].coachId};\n    });\n\n    arr.sort(function(a, b) {\n        let keyA = new Date(a.date),\n            keyB = new Date(b.date);\n        // Compare the 2 dates\n        if (keyA > keyB) return -1;\n        if (keyA < keyB) return 1;\n        return 0;\n    });\n\n    return arr;\n\n}\n\nexport function renderGame(currentGame, isCoach) {\n    return (<SingleGame obj={ currentGame }\n                        key={ currentGame._id }\n                        isCoach={ isCoach } />);\n}\n","import React, { Component } from \"react\";\nimport { sortGames, renderGame } from \"../util/utils\"\nimport { ListGroup } from \"reactstrap\";\n\nclass Player extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            games: {\n\n            },\n            games_sorted: [\n\n            ]\n        };\n    }\n\n    componentDidMount() {\n        console.log('mounting');\n        fetch('/api/games', {\n            credentials: \"same-origin\"\n        })\n            .then(res => res.json())\n            .then((data) => {\n                let games = {};\n                data.forEach(item => {\n                    games[item._id] = {date: item.date, coachId: item.coachId};\n                });\n\n                const arr = sortGames(games);\n                this.setState({games: games, games_sorted: arr});\n            })\n    }\n\n\n\n    render() {\n        const games_sorted = this.state.games_sorted;\n        return (\n            <div>\n                <h2>Player</h2>\n                <h3>Games</h3>\n                <ListGroup>\n                    {\n                        games_sorted.map(game => {\n                            return renderGame(game, false);\n                        }) }\n                </ListGroup>\n            </div>\n        );\n    }\n\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport { Button, ListGroup } from \"reactstrap\";\nimport { withRouter } from \"react-router\";\nimport { sortGames, renderGame } from \"../util/utils\";\n\nclass Coach extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            games: {\n\n            },\n            games_sorted: [\n\n            ],\n        };\n    }\n\n    componentDidMount() {\n        fetch('/api/games', {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(res => res.json())\n            .then((data) => {\n                let games = {};\n                data.forEach(item => {\n                    games[item._id] = {date: item.date, coachId: item.coachId};\n                });\n\n                const arr = sortGames(games);\n                this.setState({games: games, games_sorted: arr});\n            }).catch(err => {\n                console.log(err);\n        });\n\n    }\n\n    newGame() {\n        const coachId = localStorage.getItem('uid');\n        fetch('/api/games', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                coachId: coachId,\n            })\n        })\n            .then(res => res.json())\n            .then((data) => {\n                let games = this.state.games;\n                games[data._id] = {date: data.date, coachId: data.coachId};\n\n                let arr = sortGames(games);\n\n                this.setState({games: games, games_sorted: arr});\n\n                this.props.history.push({\n                    pathname: '/app/coach/' + data._id,\n                    state: {game: data}\n                });\n\n\n            });\n    }\n\n    render() {\n        const games_sorted = this.state.games_sorted;\n        return (\n            <div>\n                <h2>Coach</h2>\n                <Button color=\"primary\" onClick={() => { this.newGame() } }>Create Game</Button>\n                <h3>Games</h3>\n                <ListGroup>\n                    {\n                        games_sorted.map(game => {\n                            return renderGame(game, true);\n                    }) }\n                </ListGroup>\n            </div>\n        );\n    }\n\n}\n\nexport default withRouter(Coach);\n","import React, { Component } from \"react\";\nimport {\n    Button,\n    Container,\n    Col,\n    Row,\n    ListGroupItem,\n    Label,\n    Input,\n    InputGroupAddon, InputGroup\n} from \"reactstrap\";\nimport socketIOClient from 'socket.io-client';\nimport update from 'immutability-helper';\n\nlet sound = require('../../when.mp3');\n\nclass CoachGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // create audio ref.\n        this.audioRef = React.createRef();\n\n        this.state = {\n            chatTitle: \"Current Chat\",\n            players: [],\n            currentChat: [],\n            broadcasts: [],\n            currentMessage: '',\n            selectedPlayer: null,\n            showBroadcasts: false,\n            messages: {},\n            game: null,\n            socket: null,\n            isActive: {},\n            hasUnread: {},\n        };\n\n        const pastState = props.location.state;\n        if (typeof pastState === 'undefined') {\n            const gameId = props.match.params.gameId;\n\n            // get the player list and messages\n            fetch('/api/games/' + gameId, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(res => res.json())\n                .then((data) => {\n                    this.setState({\n                        game: data,\n                        players: data.players,\n                        messages: data.messages,\n                        broadcasts: data.broadcasts,\n                        isActive: data.isActive,\n                        hasUnread: data.hasUnread\n                    });\n                });\n\n        } else {\n            const game = props.location.state.game;\n\n            this.state = {\n                game: game\n            };\n        }\n\n    }\n\n    exitHandler() {\n        // disconnect the user.\n        this.state.socket.emit('disconnect');\n        window.location.href = \"/app/coach\";\n    }\n\n    componentDidMount() {\n        //this.state.socket = socketIOClient(\"http://localhost:3000\"); // dev only\n        this.state.socket = socketIOClient(\"https://vretta-demo.herokuapp.com/\");\n\n        this.state.socket.on('connect', data => {\n\n            this.state.socket.emit('storeCoachId', {\n                userId: localStorage.getItem('uid'),\n                gameId: this.props.match.params.gameId,\n            });\n\n            this.state.socket.on('receiveMessage', data => {\n                this.audioRef.current.play().catch(err => {\n                    console.log(err);\n                });\n\n                const msg = data.message;\n                const playerId = data.playerId;\n\n                if (playerId === this.state.selectedPlayer) {\n                    let currChat = this.state.currentChat.slice();\n                    currChat.push([msg, false]);\n\n                    // now update state of messages\n                    this.setState({\n                        messages: update(this.state.messages, {[playerId]: {$set: currChat}}),\n                        currentChat: currChat,\n                        hasUnread: update(this.state.hasUnread, {[playerId]: {$set: false}}),\n                    });\n\n                    // unset it as hasUnread=false on db.\n                    this.updateUnread(playerId, false);\n\n                } else { // then we just update messages\n                    let currChat = this.state.messages[playerId];\n                    if (typeof currChat === \"undefined\") {\n                        currChat = [];\n                    }\n                    currChat.push([msg, false]);\n\n                    this.setState({\n                        messages: update(this.state.messages, {[playerId]: {$set: currChat}}),\n                        hasUnread: update(this.state.hasUnread, {[playerId]: {$set: true}}),\n                    });\n                }\n\n            });\n\n            this.state.socket.on('newPlayerList', data => {\n\n                this.setState({\n                    players: data.playerList,\n                });\n            });\n\n            this.state.socket.on('playerChangeConnection', data => {\n                console.log('disconnect');\n                const playerId = data.playerId;\n                const isActive = data.isActive;\n\n                this.setState({\n                    isActive: update(this.state.isActive, {[playerId]: {$set: isActive}}),\n                });\n                \n            });\n\n        });\n\n        // get the player list and messages\n        const gameId = this.props.match.params.gameId;\n        fetch('/api/games/' + gameId, {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({\n                    players: data.players,\n                    messages: data.messages,\n                    broadcasts: data.broadcasts,\n                    isActive: data.isActive,\n                    hasUnread: data.hasUnread\n                });\n            });\n\n    }\n\n    updateUnread(playerId, unread) {\n        fetch('/api/games/unread/' + this.state.game._id, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                playerId: playerId,\n                unread: unread\n            })\n        });\n    }\n\n    playerOnClick(player) {\n        const playerMessages = this.state.messages[player];\n\n        if (this.state.hasUnread[player]) {\n            console.log('update!!');\n            this.updateUnread(player, false);\n        }\n\n        if (typeof playerMessages === \"undefined\") {\n            this.setState({\n                currentChat: [],\n                selectedPlayer: player,\n                showBroadcasts: false,\n                chatTitle: \"Current Chat\",\n                hasUnread: update(this.state.hasUnread, {[player]: {$set: false}}),\n            });\n        } else {\n            this.setState({\n                currentChat: playerMessages,\n                selectedPlayer: player,\n                showBroadcasts: false,\n                chatTitle: \"Current Chat\",\n                hasUnread: update(this.state.hasUnread, {[player]: {$set: false}}),\n            });\n        }\n    }\n\n    sendMessage(e) {\n        e.preventDefault();\n\n        const receiver = this.state.selectedPlayer;\n        const showBroadcasts = this.state.showBroadcasts;\n        if (!receiver && !showBroadcasts) { // if no player has been selected, i.e. selectedPlayer is null or undefined.\n            console.log(\"returning...\");\n            return;\n        }\n\n        if (this.state.currentMessage === '') {\n            console.log(\"empty message, returning\");\n            return;\n        }\n        \n        const sender = localStorage.getItem('uid');\n        const message = this.state.currentMessage;\n        const gameId = this.state.game._id;\n\n        // update the current client's chat.\n        let currChat = this.state.currentChat.slice();\n\n        if (showBroadcasts) {\n            const newMsg = [message, true, true];\n            currChat.push(newMsg); // third element indicates it's a broadcast message.\n\n            // in this case, update broadcasts state too.\n            let currBroadcasts = this.state.broadcasts.slice();\n            currBroadcasts.push(newMsg);\n            this.setState({ broadcasts: currBroadcasts });\n        } else {\n            currChat.push([message, true]);\n        }\n\n        this.setState({\n            messages: update(this.state.messages, {[receiver]: {$set: currChat}}),\n            currentChat: currChat,\n            currentMessage: ''\n        });\n\n        if (showBroadcasts) { // message to all players\n            this.state.socket.emit('makeBroadcast', {message: message, gameId: gameId});\n\n            let newMessages = {};\n            //Object.keys(this.state.messages).forEach(key => {\n            this.state.players.forEach(key => {\n                let currMessages = [];\n                if (typeof this.state.messages[key] !== 'undefined') {\n                    currMessages = this.state.messages[key].slice();\n                }\n\n                const newMsg = [message, true, true];\n                currMessages.push(newMsg);\n\n                newMessages[key] = currMessages;\n\n            });\n            this.setState({\n                messages: newMessages\n            });\n\n            // create new api endpoint that does this. Horrible idea to loop over api requests.\n            console.log('UPDATE THE DB... for every player.');\n\n            fetch('/api/messages/broadcast', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    s_message: message,\n                    gameId: gameId,\n                })\n            });\n\n        } else { // message to 1 player.\n            if (this.state.socket !== null) {\n\n                this.state.socket.emit('messageFromCoach', {\n                    senderId: sender,\n                    message: message,\n                    receiverId: receiver,\n                    gameId: gameId\n                });\n\n            }\n\n            fetch('/api/messages/send', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    playerId: receiver,\n                    coachId: sender,\n                    s_message: message,\n                    gameId: gameId,\n                    fromCoach: true\n                })\n            });\n        }\n\n    }\n\n    broadcastInitHandler() {\n        this.setState({\n            currentChat: this.state.broadcasts,\n            selectedPlayer: \"broadcast\",\n            showBroadcasts: true,\n            chatTitle: 'Broadcast'\n        });\n    }\n\n    updateMessage(e) {\n        this.setState({\n            currentMessage: e.target.value\n        })\n    }\n\n    renderMarginCol(msg) {\n        if (msg[1]) {\n            return (\n                <Col>\n\n                </Col>\n            );\n        }\n    }\n\n    renderBroadcastBar(msg) {\n\n        if (msg[2]) {\n            return (\n                    <ListGroupItem className=\"my-broadcast-bar\">\n                    </ListGroupItem>\n            );\n        }\n\n    }\n\n    renderMsg(msg, index) {\n        let color = \"secondary\";\n        if (msg[1]) {\n            color = \"info\";\n        }\n\n        return (\n            <Row key={ index }>\n                { this.renderMarginCol(msg) }\n                <Col sm='auto' className=\"no-margin-message\">\n                    <ListGroupItem color={ color } key={ index }>\n                        { msg[0] }\n                    </ListGroupItem>\n                </Col>\n                { this.renderBroadcastBar(msg) }\n            </Row>\n        )\n    }\n\n    renderActiveIndicator(player) {\n        if (this.state.isActive[player]) {\n            return (\n                <Button color=\"success\" className=\"active-button\" outline>Active</Button>\n            );\n        } else {\n            return (\n                <Button color=\"danger\" className=\"active-button\" outline>Inactive</Button>\n            );\n        }\n    }\n\n    renderUnread(player) {\n        if (this.state.hasUnread[player]) {\n            return (\n                <Col>\n                    <h1 className=\"message-indicator\">&#x2022;</h1>\n                </Col>\n            );\n        }\n    }\n\n    renderPlayer(player) {\n        let classes = \"player-row\";\n        if (this.state.selectedPlayer === player) {\n            classes += \" selected\";\n        }\n        return (\n            <Row onClick={() => this.playerOnClick(player)} key={ player } className={ classes }>\n                <Col xs=\"6\" key={ player }>\n                    { player }\n                </Col>\n                <Col xs=\"3\">\n                    { this.renderActiveIndicator(player) }\n                </Col>\n                    { this.renderUnread(player) }\n            </Row>\n        )\n    }\n\n    renderPlayers() {\n        let players = [];\n        if (this.state !== null && typeof this.state !== 'undefined') {\n            players = this.state.players;\n        }\n\n        if (players === undefined || players.length === 0) {\n            return (<p>Looking for players...</p>);\n        } else {\n            return (\n                <Container>\n                    {\n                        players.map(player => {\n                            return this.renderPlayer(player);\n                        })\n                    }\n                </Container>\n            );\n        }\n\n    }\n\n    renderBroadcastButton() {\n        if (this.state.selectedPlayer === \"broadcast\") {\n            return (\n                <Button color=\"info\" onClick={() => this.broadcastInitHandler()}>Broadcast</Button>\n            );\n        } else {\n            return (\n                <Button color=\"info\" onClick={() => this.broadcastInitHandler()} outline>Broadcast</Button>\n            );\n        }\n    }\n\n    render() {\n        let currentChat = this.state.currentChat;\n        if (typeof currentChat === 'undefined') {\n            currentChat = [];\n        }\n\n            return (\n                <Container className=\"outer-container\">\n                    <audio id=\"message-sound\" ref={ this.audioRef } src={ sound }></audio>\n                    <Button className=\"float-sm-left\" color=\"danger\" onClick={() => { this.exitHandler() }}>EXIT</Button>\n                    <Row className=\"outer-row\">\n                        <Col xs=\"6\">\n                            <h2>Broadcast</h2>\n                            { this.renderBroadcastButton() }\n                            <h2>Players</h2>\n                            { this.renderPlayers() }\n                        </Col>\n\n                        <Col xs=\"6\" className=\"chat-view\">\n                            <h2>{ this.state.chatTitle }</h2>\n                            <h6>{ this.state.selectedPlayer }</h6>\n                            {\n                                currentChat.map((msg, index) => {\n                                    return this.renderMsg(msg, index);\n                                })\n                            }\n                        </Col>\n                        <Col xs={{ size: 6, offset: 6 }}>\n                            <InputGroup>\n                                <Label for=\"message\" hidden>Type here...</Label>\n                                <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Type here...\"\n                                       value={ this.state.currentMessage } onChange={ e => this.updateMessage(e) }\n                                />\n                                <InputGroupAddon addonType=\"append\">\n                                    <Button onClick={ (e) => this.sendMessage(e) }>Send</Button>\n                                </InputGroupAddon>\n\n                            </InputGroup>\n                        </Col>\n                    </Row>\n\n                </Container>\n            );\n    }\n\n}\n\nexport default CoachGame;\n","import React, { Component } from \"react\";\nimport {Label, Input, Button, Container, Row, Col, InputGroup, InputGroupAddon, ListGroupItem} from \"reactstrap\";\nimport socketIOClient from \"socket.io-client\";\n\nlet sound = require('../../when.mp3');\n\nclass PlayerChat extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // create audio ref.\n        this.audioRef = React.createRef();\n\n        const game = props.location.state.game;\n\n        this.state = {\n            currentChat: [],\n            currentMessage: '',\n            game: game,\n            socket: null\n        };\n    }\n\n    exitHandler() {\n        // disconnect the user.\n        this.state.socket.emit('disconnect');\n        window.location.href = \"/app/player\";\n    }\n\n    componentDidMount() {\n        // this.state.socket = socketIOClient(\"http://localhost:3000\"); // dev only\n        this.state.socket = socketIOClient(\"https://vretta-demo.herokuapp.com/\");\n\n        const uid = localStorage.getItem('uid');\n\n        this.state.socket.on('connect', data => {\n\n            this.state.socket.emit('storePlayerId', {\n                userId: uid,\n                gameId: this.state.game._id\n            });\n\n            this.state.socket.on('receiveMessage', data => {\n                this.audioRef.current.play().catch(err => {\n                    console.log(err);\n                });\n\n                const msg = data.message;\n\n                let currChat = this.state.currentChat.slice();\n                currChat.push([msg, true]);\n                this.setState({\n                    currentChat: currChat\n                });\n\n            });\n\n            this.state.socket.on('receiveBroadcast', data => {\n                this.audioRef.current.play().catch(err => {\n                    console.log(err);\n                });\n\n                const msg = data.message;\n\n                let currChat = this.state.currentChat.slice();\n                currChat.push([msg, true, true]);\n                this.setState({\n                    currentChat: currChat\n                });\n\n            });\n\n        });\n\n        // get the player list and messages\n        fetch('/api/games/' + this.state.game._id, {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then((data) => {\n                const playerChat = data.messages[uid];\n                let currChat = [];\n                if ((typeof uid !== 'undefined') && (typeof playerChat !== 'undefined')) {\n                    currChat = playerChat;\n                }\n\n                this.setState({ currentChat: currChat });\n\n            });\n\n    }\n\n    sendMessage(e) {\n        e.preventDefault();\n\n        if (this.state.currentMessage === '') {\n            console.log(\"empty message, returning\");\n            return;\n        }\n\n        const sender = localStorage.getItem('uid');\n        const message = this.state.currentMessage;\n        const receiver = this.state.game.coachId;\n        const gameId = this.state.game._id;\n\n        // update the current client's chat.\n        let currChat = this.state.currentChat.slice();\n        currChat.push([message, false]);\n        this.setState({\n            currentChat: currChat,\n            currentMessage: ''\n        });\n\n        if (this.state.socket !== null) {\n\n            this.state.socket.emit('messageFromPlayer', {\n                senderId: sender,\n                message: message,\n                gameId: gameId\n            });\n\n        }\n\n        fetch('/api/messages/send', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                playerId: sender,\n                coachId: receiver,\n                s_message: message,\n                gameId: gameId,\n                fromCoach: false\n            })\n        });\n\n    }\n\n    updateMessage(e) {\n        this.setState({\n            currentMessage: e.target.value\n        })\n    }\n\n    renderMarginCol(msg) {\n        if (!msg[1]) {\n            return (\n                <Col>\n\n                </Col>\n            );\n        }\n    }\n\n    renderBroadcastBar(msg) {\n\n        if (msg[2]) {\n            return (\n                <ListGroupItem className=\"not-my-broadcast-bar\">\n                </ListGroupItem>\n            );\n        }\n\n    }\n    renderMsg(msg, index) {\n        let color = \"secondary\";\n        if (!msg[1]) {\n            color = \"info\";\n        }\n        return (\n            <Row key={ index }>\n                { this.renderMarginCol(msg) }\n                { this.renderBroadcastBar(msg) }\n                <Col sm='auto' className=\"no-margin-message\">\n                    <ListGroupItem color={ color } key={ index }>\n                        { msg[0] }\n                    </ListGroupItem>\n                </Col>\n            </Row>\n        )\n    }\n\n    render() {\n        const currentChat = this.state.currentChat;\n\n        return (\n            <Container className=\"outer-container\">\n                <audio id=\"message-sound\" ref={ this.audioRef } src={ sound }></audio>\n                <Button className=\"float-sm-left\" color=\"danger\" onClick={() => { this.exitHandler() }}>EXIT</Button>\n                <Row className=\"outer-row\">\n                    <Col sm={{ size: 6, offset: 3 }} className=\"chat-view\">\n                        <h2>Current Chat</h2>\n                        {\n                            currentChat.map((msg, index) => {\n                                return this.renderMsg(msg, index);\n                            })\n                        }\n\n                    </Col>\n                    <Col sm={{ size: 6, offset: 3 }}>\n                        <InputGroup>\n                            <Label for=\"message\" hidden>Type here...</Label>\n                            <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Type here...\"\n                                   value={ this.state.currentMessage } onChange={ e => this.updateMessage(e) }\n                            />\n                            <InputGroupAddon addonType=\"append\">\n                                <Button onClick={ (e) => this.sendMessage(e) }>Send</Button>\n                            </InputGroupAddon>\n\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n}\n\nexport default PlayerChat;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport { Button } from \"reactstrap\";\n\nimport Start from \"./components/Start\";\nimport TheApp from \"./components/TheApp\";\n\nimport Player from \"./components/player/Player\";\n\nimport Coach from \"./components/coach/Coach\";\nimport CoachGame from \"./components/coach/CoachGame\";\n\nimport PlayerChat from \"./components/player/PlayerChat\";\n\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path=\"/\" component={Start} />\n                    <Route exact path=\"/app\" component={TheApp} />\n\n                    <Route exact path=\"/app/coach\" component={Coach} />\n                    <Route path=\"/app/coach/:gameId\" component={CoachGame} />\n\n                    <Route exact path=\"/app/player\" component={Player} />\n                    <Route path=\"/app/player/:gameId\" component={ PlayerChat } />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/when.6caba2fa.mp3\";"],"sourceRoot":""}